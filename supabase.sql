-- Run these in Supabase SQL editor

-- Extensions
create extension if not exists pgcrypto;

-- Profiles table (unique name, optional baseline/pack/mode)
create table if not exists public.profiles (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  baseline integer,
  pack numeric(10,2),
  mode text,
  target_today integer
);

-- Activities feed (global)
create table if not exists public.activities (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  icon text,
  text text,
  profile_id uuid references public.profiles(id)
);

-- Realtime publication (for activities)
alter publication supabase_realtime add table public.activities;

-- Enable RLS and permissive policies (demo)
alter table public.profiles enable row level security;
alter table public.activities enable row level security;

create policy "profiles read" on public.profiles for select using (true);
create policy "profiles upsert" on public.profiles for insert with check (true);
create policy "profiles update" on public.profiles for update using (true) with check (true);

create policy "activities read" on public.activities for select using (true);
create policy "activities insert" on public.activities for insert with check (true);
create policy "activities delete" on public.activities for delete using (true);

-- Smoke logs: one row per sigaretta registrata
create table if not exists public.smoke_logs (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  profile_id uuid not null references public.profiles(id) on delete cascade,
  activity_id bigint references public.activities(id)
);
alter table public.smoke_logs enable row level security;
create policy "smoke_logs read" on public.smoke_logs for select using (true);
create policy "smoke_logs insert" on public.smoke_logs for insert with check (true);
create policy "smoke_logs delete" on public.smoke_logs for delete using (true);

-- Daily stats per profilo
create table if not exists public.daily_stats (
  profile_id uuid not null references public.profiles(id) on delete cascade,
  date date not null,
  smoked integer not null default 0,
  target integer,
  points integer,
  primary key (profile_id, date)
);
alter table public.daily_stats enable row level security;
create policy "daily_stats read" on public.daily_stats for select using (true);
create policy "daily_stats upsert" on public.daily_stats for insert with check (true);
create policy "daily_stats update" on public.daily_stats for update using (true) with check (true);

-- Challenge rewards (bonus points applied on completion day)
create table if not exists public.challenge_rewards (
  profile_id uuid not null references public.profiles(id) on delete cascade,
  date date not null,
  challenge_key text not null,
  points integer not null,
  awarded_at timestamptz not null default now(),
  primary key (profile_id, date, challenge_key)
);
alter table public.challenge_rewards enable row level security;
create policy "challenge_rewards read" on public.challenge_rewards for select using (true);
create policy "challenge_rewards insert" on public.challenge_rewards for insert with check (true);
